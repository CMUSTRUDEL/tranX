IDENT, LITERAL  # primitive types: identifiers; literals

# The main recursive type.
EXPR = ArrayDecl(EXPR type, EXPR? dim, DIM_QUAL* dim_quals)
     | ArrayRef(EXPR name, EXPR subscript)
     | Assignment(ASSIGN_OPER op, EXPR lvalue, EXPR rvalue)
     | BinaryOp(BINARY_OP op, EXPR left, EXPR right)
     | Break
     | Case(EXPR expr, EXPR* stmts)
     | Cast(EXPR to_type, EXPR expr)
     | Compound(EXPR* block_items)
     | CompoundLiteral(EXPR type, EXPR init)
     | Constant(LITERAL_TYPE type, LITERAL value)
     | Continue
     | Decl(IDENT? name, QUAL* quals, STORAGE* storage, FUNCSPEC* funcspec, EXPR type, EXPR? init, EXPR? bitsize)
     | DeclList(EXPR* decls)
     | Default(EXPR* stmts)
     | DoWhile(EXPR cond, EXPR stmt)
     | EllipsisParam
     | EmptyStatement
     | Enum(IDENT? name, EXPR? values)
     | Enumerator(IDENT name, EXPR? value)
     | EnumeratorList(EXPR* enumerators)
     | ExprList(EXPR* exprs)
     | FileAST(EXPR* ext)
     | For(EXPR? init, EXPR? cond, EXPR? next, EXPR stmt)
     | FuncCall(EXPR name, EXPR? args)
     | FuncDecl(EXPR? args, EXPR type)
     | FuncDef(EXPR decl, EXPR* param_decls, EXPR body)
     | Goto(IDENT name)
     | ID(IDENT name)
     | IdentifierType(IDENT* names)
     | If(EXPR cond, EXPR iftrue, EXPR? iffalse)
     | InitList(EXPR* exprs)
     | Label(IDENT name, EXPR stmt)
     | NamedInitializer(EXPR* name, EXPR expr)
     | ParamList(EXPR* params)
     | PtrDecl(QUAL* quals, EXPR type)
     | Return(EXPR? expr)
     | Struct(IDENT? name, EXPR* decls)
     | StructRef(EXPR name, REF_TYPE type, EXPR field)
     | Switch(EXPR cond, EXPR stmt)
     | TernaryOp(EXPR cond, EXPR iftrue, EXPR iffalse)
     | TypeDecl(IDENT? declname, QUAL* quals, EXPR type)
     | Typedef(IDENT name, QUAL* quals, STORAGE* storage, EXPR type)
     | Typename(IDENT? name, QUAL* quals, EXPR type)
     | UnaryOp(UNARY_OP op, EXPR expr)
     | Union(IDENT? name, EXPR* decls)
     | While(EXPR cond, EXPR stmt)

# Qualifier types.
QUAL = Const | Volatile | Restrict
DIM_QUAL = ConstDim | VolatileDim | RestrictDim | StaticDim
STORAGE = Extern | Static | Register | Auto | TypedefStorage
FUNCSPEC = Inline

# Literal types.
# Note: `IntLiteral` covers all integer variants (unsigned, long long). So does `FloatLiteral` (double, long double).
LITERAL_TYPE = IntLiteral | FloatLiteral | CharLiteral | StringLiteral

# Operator types.
REF_TYPE = Arrow | Dot
ASSIGN_OPER = NormalAssign | AddAssign | SubAssign | MulAssign | DivAssign | ModAssign | BitAndAssign | BitOrAssign | BitXorAssign | LShiftAssign | RShiftAssign
UNARY_OP = UAdd | USub | PreInc | PostInc | PreDec | PostDec | Not | BitNot | Deref | SizeOf | AddressOf
BINARY_OP = Assign | Add | Sub | Mul | Div | Mod | Eq | NotEq | Lt | LtE | Gt | GtE | And | Or | BitAnd | BitOr | BitXor | LShift | RShift
